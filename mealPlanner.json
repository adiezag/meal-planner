{
  "name": "workflow test 3",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -544,
        16
      ],
      "id": "d2fe987b-11b1-491d-97e4-dfabd2be0481",
      "name": "Telegram Trigger",
      "webhookId": "4920eead-b1a3-4d12-905f-ae55a7405311",
      "credentials": {
        "telegramApi": {
          "id": "a00nxDz2F5k7TnU2",
          "name": "demo"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a helpful assistant that will delegate to a corresponding tool to complete the user's profile in the users table. Do not do anything else other than what it is instructed to do below.\n\nYou have two tools:\n\"search tool\": use this tool to run a query to see which fields are set to null, meaning that there is missing user's information.\n\n\"users update\": use this tool to update an entry in users table where the id is equal to {{ $('Telegram Trigger').item.json.message.chat.id }}.\n\n# task\nYour task is: \n1. use your \"search tool\" to check what fields in users table are set to null. Your job is to ask the user to provide the missing information so you can use your \"users update\" tool to complete the user's profile.\n\n\n2. to generate the query and pass it to the users update tool.\nFollow this example query:\nUPDATE users SET <column_name> WHERE id = {{ $('Telegram Trigger').item.json.message.chat.id }};\n\n# users table details (user's profile)\n\nI will provide the name of the columns and what they represent:\nid: {{ $('Telegram Trigger').item.json.message.chat.id }}\nname: {{ $('Telegram Trigger').item.json.message.chat.first_name }}\nweight: it is the weight of the user.\nheight: it is the height of the user.\nmeal_freq: it is the meal frequency or the number of meals the user has in one day.\npreferences: it is any additional and relevant information like vegan, vegetarian, losing weight, building muscle, etc."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        416,
        -272
      ],
      "id": "9277e84e-a468-4324-9bb2-2a484886aa24",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        336,
        32
      ],
      "id": "5ed9c18b-c298-4f16-81b8-b850b382fa09",
      "name": "gpt 4.1",
      "credentials": {
        "openAiApi": {
          "id": "OU2IOKNXQbBHg8yL",
          "name": "OpenAi account 1"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM users WHERE id = {{ $json.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        544,
        0
      ],
      "id": "abb62c17-ea6d-41f0-8de7-867352075824",
      "name": "search tool",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        144,
        384
      ],
      "id": "e1b3c6d6-7e71-4813-bae7-c668fe954869",
      "name": "gpt 4.1 2",
      "credentials": {
        "openAiApi": {
          "id": "OU2IOKNXQbBHg8yL",
          "name": "OpenAi account 1"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Telegram Trigger').item.json.message.text }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a helpful assistant that will delegate to a corresponding tool to update the user's profile in the users table whose id is equal to {{ $json.id }} and to create a meal plan based on the user's information.\nAlso, you are able to use your \"plot\" tool to make a plot or graph about the user's weight progress. It is a http request node. \n\nYou have five tools:\n\"search tool\": use this tool to retrieve user's profile info, weight, height, meal_freq and preferences.\n\"users update\": use this tool to update an entry in users table where the id is equal to {{ $json.id }}.\n\"meal planner\": use this tool to create a meal plan for the day.\n\"weight progress\": use this tool to retrieve user's weight progress only if requested.\n\"plotter\": use this tool to make a graph of weight progress. access the progress table, retrieve data and pass it to this node, the data is passed as a json object called \"chart\".\n# task\nYour task is: \n1. if asked to update information, generate the query and pass it to your \"users update\" tool when needed.\n\nFollow this example query:\nUPDATE users SET <column_name> WHERE id = {{ $json.id }};\n\n2. if asked to create a meal plan, create a meal plan for the day based on the user's info.\n\n# users table details (user's profile)\n\nI will provide the name of the columns and what they represent:\nid: {{ $json.id }}\nname: {{ $json.name }}\nweight: it is the weight of the user in pounds.\nheight: it is the height of the user in centimeters.\nmeal_freq: it is the meal frequency or the number of meals the user has in one day.\npreferences: it is any additional and relevant information like vegan, vegetarian, losing weight, building muscle, etc.\n\n3. Return data retrieved from progress table by using your weight progress Postgres tool only when requested.\n\n4. Send data retrieved from progress table to make a plot. Send a json object called \"chart\". Return full link to see graph."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        336,
        224
      ],
      "id": "8c6d315b-ecf6-456f-8148-b21101b84766",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        432,
        96
      ],
      "id": "1c9c2f52-4a0b-41ac-8c32-0efdffecef36",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        816,
        304
      ],
      "id": "c5491da7-af61-491e-8749-4f13f53e6f0c",
      "name": "response2",
      "webhookId": "1621f318-0ed5-4a91-a609-35ed9047cbc3",
      "credentials": {
        "telegramApi": {
          "id": "a00nxDz2F5k7TnU2",
          "name": "demo"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        832,
        -112
      ],
      "id": "40cdbe78-c1f0-4666-aca9-e6988265c7fc",
      "name": "response1",
      "webhookId": "1621f318-0ed5-4a91-a609-35ed9047cbc3",
      "credentials": {
        "telegramApi": {
          "id": "a00nxDz2F5k7TnU2",
          "name": "demo"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM users WHERE id = {{ $json.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        320,
        592
      ],
      "id": "efd621bc-5756-42fe-8b9e-509ee544f7bb",
      "name": "search tool1",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "description": "Call this tool to take any queries action.",
        "workflowId": {
          "__rl": true,
          "value": "Bhf6dATTkwUdBaUg",
          "mode": "list",
          "cachedResultName": "sub agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        448,
        592
      ],
      "id": "10a82de9-f533-4006-b255-86e44e81942f",
      "name": "users updater1"
    },
    {
      "parameters": {
        "description": "Call this tool to create a meal plan for the user.",
        "workflowId": {
          "__rl": true,
          "value": "LpljPg7gXiEapma5",
          "mode": "list",
          "cachedResultName": "sub agent 2"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        576,
        512
      ],
      "id": "e23e080b-4b0b-42e5-9257-699771566c3c",
      "name": "meal planner"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        208,
        576
      ],
      "id": "4d34d1ea-1f23-48b5-8da7-7f2246365f90",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO users (id, name)\nVALUES ({{ $json.message.chat.id }}, '{{ $json.message.chat.first_name }}')\nON CONFLICT (id) DO NOTHING;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -336,
        16
      ],
      "id": "8abd2b98-7de0-4947-bd73-af64b821f8f7",
      "name": "add/check user",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM users WHERE id = {{ $('Telegram Trigger').item.json.message.chat.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -112,
        16
      ],
      "id": "ddb90e04-95e8-4920-9fd4-507fe43d84b7",
      "name": "check missing info",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c6c76ccb-faea-4624-a71b-2a6f1e9a17b7",
              "leftValue": "={{ $json.weight }}",
              "rightValue": {},
              "operator": {
                "type": "number",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "059376b7-e5d7-4620-9696-b55b76efc3a1",
              "leftValue": "={{ $json.height }}",
              "rightValue": {},
              "operator": {
                "type": "number",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "aff3e614-f160-44b6-bec4-8ddc2aedb4b8",
              "leftValue": "={{ $json.meal_freq }}",
              "rightValue": {},
              "operator": {
                "type": "number",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "a51f9bd5-4255-456c-8bb6-b3956566d4f1",
              "leftValue": "={{ $json.preferences }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        112,
        16
      ],
      "id": "f143148c-b4f5-42f6-a92f-7c7f0630f072",
      "name": "If",
      "notes": "Pass telegram trigger's message"
    },
    {
      "parameters": {
        "description": "Call this tool to take any queries action.",
        "workflowId": {
          "__rl": true,
          "value": "Bhf6dATTkwUdBaUg",
          "mode": "list",
          "cachedResultName": "sub agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        672,
        0
      ],
      "id": "8c1093fb-e2c8-43f0-997f-3928c21133b0",
      "name": "users update"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM progress WHERE user_id = {{ $('Telegram Trigger').item.json.message.chat.id }};",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        688,
        624
      ],
      "id": "7e0eec75-d1a8-4ddb-9ca0-e904e0da5f73",
      "name": "weight progress",
      "credentials": {
        "postgres": {
          "id": "P0GP2MfZyJhSthKW",
          "name": "Postgres test"
        }
      }
    },
    {
      "parameters": {
        "description": "=Call this tool to create a plot to visualize weight progress.",
        "workflowId": {
          "__rl": true,
          "value": "0IriwlmlLSofayYy",
          "mode": "list",
          "cachedResultName": "subagent3"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        1056,
        592
      ],
      "id": "7c7953cc-e83b-471d-8979-8844c1b24818",
      "name": "plotter"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "add/check user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gpt 4.1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "search tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "gpt 4.1 2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "response2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "search tool1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "users updater1": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "meal planner": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "add/check user": {
      "main": [
        [
          {
            "node": "check missing info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check missing info": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "users update": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "weight progress": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "plotter": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "06847690-8093-4451-aa70-6a66d9f5e931",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a958225c6b089cdfa35ef2f553e6c8a20d485f3f55a00ab3222731328fafa2db"
  },
  "id": "wAxYAATTtES1aktZ",
  "tags": []
}